require('dotenv').config();
const express = require('express');
const session = require('express-session');
const { MongoClient } = require('mongodb');
const path = require('path');

const app = express();
const port = process.env.PORT || 3000;

// Подключение к MongoDB
const mongoUri = process.env.MONGO_URI || "mongodb+srv://admin:228565@repairworks.exoy7l9.mongodb.net/?retryWrites=true&w=majority&appName=repairworks";
let db;

async function connectDB() {
  const client = new MongoClient(mongoUri);
  await client.connect();
  db = client.db('repairworks');
  console.log('Connected to MongoDB');
}

// Middleware
app.use(express.static('static'));
app.use(express.urlencoded({ extended: true }));
app.use(express.json());
app.use(session({
  secret: process.env.SECRET_KEY || 'your-secret-key-here',
  resave: false,
  saveUninitialized: true
}));

// Роуты
app.get('/', async (req, res) => {
  if (!req.session.user) return res.redirect('/login.html');

  try {
    const data = {
      user: req.session.user,
      clients: await db.collection('clients').find().toArray(),
      contractors: await db.collection('contractors').find().toArray(),
      materials: await db.collection('materials').find().toArray(),
      objects: await db.collection('objects').find().toArray(),
      users: await db.collection('users').find({ root: false }).toArray()
    };

    if (req.session.user.is_admin) {
      data.orders = await db.collection('orders').find().toArray();
    } else {
      data.orders = await db.collection('orders').find({
        $or: [
          { "user_id": req.session.user._id },
          { "assigned_user_id": req.session.user._id }
        ]
      }).toArray();
    }

    res.sendFile(path.join(__dirname, 'static', 'index.html'));
  } catch (err) {
    res.status(500).send('Server error');
  }
});

app.post('/login', async (req, res) => {
  try {
    const user = await db.collection('users').findOne({
      login: req.body.login,
      password: req.body.password
    });

    if (user) {
      req.session.user = {
        _id: user._id.toString(),
        login: user.login,
        is_admin: user.root || false
      };
      return res.redirect('/');
    }

    // Здесь нужно добавить flash-сообщения (потребуется дополнительный middleware)
    res.redirect('/login.html?error=1');
  } catch (err) {
    res.status(500).send('Login error');
  }
});

app.get('/logout', (req, res) => {
  req.session.destroy();
  res.redirect('/login.html');
});

// API для фронтенда (вместо Jinja)
app.get('/api/data', async (req, res) => {
  if (!req.session.user) return res.status(401).json({ error: 'Unauthorized' });

  try {
    const data = {
      user: req.session.user,
      clients: await db.collection('clients').find().toArray(),
      // ... остальные коллекции
    };
    res.json(data);
  } catch (err) {
    res.status(500).json({ error: 'Database error' });
  }
});

// Запуск сервера
connectDB().then(() => {
  app.listen(port, () => {
    console.log(`Server running on http://localhost:${port}`);
  });
});